#================================================================================
# RogueDoc.rogue
# October 29, 2023
#================================================================================

$define VERSION "1.0"
$define DATE    "October 29, 2023"

$requireRogue "2.32"

uses Console/CommandLineParser

try
  RogueDoc( System.command_line_arguments )
catch (error:Error)
  Console.error.println error
  System.exit 1
endTry

class RogueDoc
  PROPERTIES
    output_file : File

    modules = @{}
    types   = @{}
    groups  = @{}

    writer : PrintWriter

    ch_to_wiki_url = String[][
      "-", "!", "%22", "%23", "$", "%25", "&", "'", "(", ")", "*", "-", ",", "-", ".", "-",
      "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", ":", ";", "-", "=", "-", "%3F",
      "@", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O",
      "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "%5B", "%5C", "%5D", "%5E", "_",
      "%60", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o",
      "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "%7B", "%7C", "%7D", "~"
    ]

  METHODS
    method init( args:String[] )
      local command = parse_args( args )

      #trace command
      # has //options and possibly //args

      if (command//options//help or command//args.is_empty)
        print_usage
        System.exit 0
      endIf

      if (command//args.count > 1)
        throw Error( "Too many arguments. A single API .json file is expected." )
      endIf

      local api_file = File( command//args.first->String )
      if (not api_file.exists)
        throw Error( "No such API file: " + api_file )
      endIf

      if local output = command//options//output
        output_file = File( output->String )
      else
        output_file = File( api_file.split_filepath_and_extension.filepath )
      endIf

      if (output_file.is_folder)
        output_file /= "API"
      elseIf (not output_file.exists)
        println "> Create $/"(output_file)
        output_file.create_folder
        output_file /= "API"
      endIf

      read_api( api_file )

      writer = (output_file+".md").print_writer
      generate_markdown
      writer.close

    method generate_markdown
      #{
      writer.println "# Contents"
      forEach (group_name in groups.keys)
        writer.print "- "
        print_markdown_link( group_name )
        writer.println
        local group = groups[group_name]
        forEach (filename in group.keys)
          writer.println "    - $"(filename)
          local file = group[filename]
          forEach (item in file)
            writer.print "      - "
            local text : String
            if (item//is_routine)
              text = "routine $"(item//signature)
            else
              if (item//attributes.contains("enum"))
                text = "enum $"(item//name)
              else
                text = "class $"(item//name)
              endIf
            endIf
            print_markdown_link( text )
            writer.println
          endForEach
        endForEach
      endForEach
      }#

      forEach (group_name in groups.keys)
        writer.println
        writer.println "# $"(group_name)
        local group = groups[group_name]
        forEach (filename in group.keys)
          writer.println "## $"(filename)
          local file = group[filename]
          forEach (item in file)
            writer.print "### "
            local text : String
            if (item//is_routine)
              text = "routine $"(item//signature)
              print_escaped_markdown( text )
              writer.println
            else
              if (item//attributes.contains("enum"))
                text = "enum $"(item//name)
                print_escaped_markdown( text )
                writer.println
                if (item//attributes.count > 1)
                  writer.println "#### Attributes"
                  writer.print '['
                  local first = true
                  forEach (attribute in item//attributes)
                    if (attribute == "enum") nextIteration
                    if (first) first = false
                    else       writer.print ','
                    writer.print attribute
                  endForEach
                  writer.println ']'
                endIf
              else
                text = "class $"(item//name)
                print_escaped_markdown( text )
                writer.println
                local is_class = item//attributes.contains("class")
                if ((is_class and item//attributes.count > 1) or (not is_class and item//attributes))
                  writer.println "#### Attributes"
                  writer.print '['
                  local first = true
                  forEach (attribute in item//attributes)
                    if (attribute == "class") nextIteration
                    if (first) first = false
                    else       writer.print ','
                    writer.print attribute
                  endForEach
                  writer.println ']'
                endIf
              endIf
            endIf
            print_html_description( item//description )

            print_markdown_categories( item//categories )
            print_markdown_properties( item//global_properties, "Global Properties" )
            print_markdown_properties( item//properties, "Properties" )

            writer.println

          endForEach
        endForEach
      endForEach

    method print_escaped_markdown( text:String )->String
      forEach (ch in text)
        if ("*_\\&[]<>".contains(ch)) writer.print '\\'
        writer.print ch
      endForEach

    method print_escaped_html( text:String )->String
      forEach (ch in text)
        which (ch)
          case '&':  writer.print "&amp;"
          case '<':  writer.print "&lt;"
          case '>':  writer.print "&gt;"
          others:    writer.print ch
        endWhich
      endForEach

    method print_html_description( description:Value )
      if (not description) return
      writer.println
      local text = description->String.trimmed

      local margin = 2
      forEach (line in LineReader(text))
        if (line.count > 1 and line[1] != ' ')
          margin = 1
          escapeForEach
        endIf
      endForEach

      writer.print "<pre>"
      forEach (line in LineReader(text))
        writer.println line.unleft(margin)
      endForEach
      writer.println "</pre>"

    method print_html_type( type_name:String, link_type_name:String )
      local type = types[ link_type_name ]
      type_name = without_module_names( type_name )
      if (type)
        writer.print ''<a href="#''
        if (type//attributes.contains("enum"))
          writer.print( "enum-" )
        else
          writer.print( "class-" )
        endIf
        forEach (ch in type//name->String)
          if (ch.is_alphanumeric or ch == '-' or ch == '_') writer.print(ch)
          elseIf (ch == ' ') writer.print '-'
        endForEach
        writer.print ''">''
        print_escaped_html( type_name )
        writer.print "</a>"
      elseIf (type_name.begins_with("(Function("))
        print_escaped_html( type_name.unleft(1).unright(1) )
      else
        print_escaped_html( type_name )
      endIf

    method print_markdown_categories( categories:Value )
      if (not categories) return

      writer.println
      writer.println "#### Categories"
      writer.println
      writer.println "<table>"
      writer.println "<tr><th>Category</th><th>Value</th><th>Description</th></tr>"
      forEach (category in categories)
        writer.println "<tr>"
        writer.print   "<td>"
        print_escaped_html( category//name )
        writer.print   "</td>"
        writer.print   "<td>"
        print_escaped_html( category//value->Int32 )
        writer.print   "</td>"
        writer.print   "<td>"
        print_html_description( category//description )
        writer.print   "</td>"
        writer.println "</tr>"
      endForEach
      writer.println "</table>"
      writer.println

    method print_markdown_properties( properties:Value, header:String )
      if (not properties) return

      writer.println
      writer.println "#### $"(header)
      writer.println
      writer.println "<table>"
      writer.println "<tr><th>Name</th><th>Type</th><th>Description</th></tr>"
      forEach (property in properties)
        writer.println "<tr>"
        writer.print   "<td>"
        print_escaped_html( property//name )
        writer.print   "</td>"
        writer.print   "<td>"
        print_html_type( property//type, property//doc_type )
        writer.print   "</td>"
        writer.print   "<td>"
        print_html_description( property//description )
        writer.print   "</td>"
        writer.println "</tr>"
      endForEach
      writer.println "</table>"
      writer.println

    method print_markdown_description( description:Value )
      if (not description) return
      local text = description->String.trimmed
      forEach (line in LineReader(text))
        writer.println line.after_first('#').trimmed
      endForEach

    method print_markdown_link( text:String )->String
      writer.print '['
      print_escaped_markdown( text )
      writer.print ']'
      writer.print "(#"
      forEach (ch in text)
        if (ch.is_alphanumeric or ch == '-' or ch == '_') writer.print(ch)
        elseIf (ch == ' ') writer.print '-'
      endForEach
      writer.print ')'

    method read_api( api_file:File )
      local api = JSON.parse( api_file )
      if (not api//modules)
        throw Error( "Invalid API file - 'modules' array expected." )
      endIf
      forEach (mod in api//modules)
        modules[mod//name] = mod
        forEach (type in mod//types)
          if (type//name == "Routine")
            forEach (m in type//global_methods)
              m//is_routine = true
              m//sort_name = m//signature
              update_signature( m )
              add_to_group( m//filepath, m )
            endForEach
          else
            types[type//scoped_name] = type
            type//sort_name = type//name
            add_to_group( type//filepath, type )
          endIf
        endForEach
      endForEach

      groups.sort( (a,b) => a->String.compare_to(b->String,&ignore_case) <= 0 )
      forEach (group in groups.values)
        group//files.sort( (a,b) => a->String.compare_to(b->String,&ignore_case) <= 0 )
        forEach (file in group.values)
          file.sort( (a,b) => a//sort_name->String.compare_to(b//sort_name,&ignore_case) <= 0 )
        endForEach
      endForEach

    method add_to_group( filepath:String, value:Value )
      local group_name = filepath.before_first(".rogue")
      if (group_name.contains('/')) group_name = File(group_name).folder

      local group = groups[ group_name ]
      if (not group)
        group = @{}
        groups[group_name] = group
      endIf

      local filename = File( filepath ).filename
      local file = group[filename]
      if (not file)
        file = @[]
        group[filename] = file
      endIf

      file.add( value )

    method without_module_names( text:String )->String
local og = text
      local result = String()
      local scanner = Scanner( text )
      local id : String
      while (scanner.has_another)
        if (id)
          if (scanner.consume("::"))
            id.clear
            id.print( scanner.scan_identifier )
          else
            result.print( id )
            id = null
            result.print( scanner.read )
          endIf
        else
          if (scanner.next_is_identifier)
            id = String()
            id.print( scanner.scan_identifier )
          else
            result.print( scanner.read )
          endIf
        endIf
      endWhile

      if (id)
        result.print( id )
      endIf

if (og.contains("Function") and not result.contains("Function"))
trace og, result
endIf

      return result

    method update_signature( m:Value )
      m//signature = without_module_names( m//signature->String )

    method parse_args( args:String[] )->Value
      local command = CommandLineParser().
      [
        option( "--help",    &aliases=["-h","-?"] )
        option( "--output=", &alias="-o" )
      ].parse( args )
      return command

    method print_usage
      println "RogueDoc v$"(VERSION)
      println "$"(DATE)
      println

      println @|USAGE
               |  roguedoc [OPTIONS] <api-file>.json
               |
               |API FILE
               |  Generate the input API JSON file with 'roguec --doc' for the standard library
               |  or 'roguec --doc=<folder-or-filepath>'.
               |
               |OPTIONS
               |  --help, -h, -?
               |    Show this help text.
               |
               |  --output=<filepath>, -o <filepath>
               |    Specify the file or folder to write output to. If a file is specified, only
               |    a high-level document is generated. If a folder is specified, both
               |    high-level and detailed documents will be generated.
               |================================================================================
endClass

